basePath: /
definitions:
  api.Error:
    properties:
      code:
        type: string
      message:
        type: string
      parameter:
        type: string
    type: object
  api.ErrorResponse:
    properties:
      error:
        items:
          $ref: '#/definitions/api.Error'
        type: array
      status:
        type: string
    type: object
  api.Response:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  api.SuccessResponse-userDTO_TokenResponse:
    properties:
      data:
        $ref: '#/definitions/userDTO.TokenResponse'
      message:
        type: string
      status:
        type: string
    type: object
  api.SuccessResponse-userDTO_UserResponseDTO:
    properties:
      data:
        $ref: '#/definitions/userDTO.UserResponseDTO'
      message:
        type: string
      status:
        type: string
    type: object
  api.SuccessResponse-userDTO_UsersResponse:
    properties:
      data:
        $ref: '#/definitions/userDTO.UsersResponse'
      message:
        type: string
      status:
        type: string
    type: object
  userDTO.ForgotPasswordInput:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  userDTO.ResetPasswordInput:
    properties:
      password:
        type: string
      password_confirm:
        type: string
    required:
    - password
    - password_confirm
    type: object
  userDTO.SignInInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  userDTO.SignUpInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      password_confirm:
        type: string
    required:
    - email
    - name
    - password
    - password_confirm
    type: object
  userDTO.TokenResponse:
    properties:
      access_token:
        type: string
    type: object
  userDTO.UpdateUserInput:
    properties:
      age:
        type: integer
      gender:
        type: string
      grade:
        type: integer
    type: object
  userDTO.UserResponse:
    properties:
      age:
        type: integer
      continuous_progress:
        type: string
      created_at:
        type: string
      email:
        type: string
      gender:
        type: string
      grade:
        type: integer
      id:
        type: string
      name:
        type: string
    type: object
  userDTO.UserResponseDTO:
    properties:
      user:
        $ref: '#/definitions/userDTO.UserResponse'
    type: object
  userDTO.UsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/userDTO.UserResponse'
        type: array
    type: object
host: localhost:8000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber Example API
  version: "1.0"
paths:
  /api/v1/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: forgot password
      parameters:
      - description: ForgotPasswordInput
        in: body
        name: ForgotPasswordInput
        required: true
        schema:
          $ref: '#/definitions/userDTO.ForgotPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "401":
          description: User email is not verified
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      tags:
      - Auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: sign in user
      parameters:
      - description: SignInInput
        in: body
        name: SignInInput
        required: true
        schema:
          $ref: '#/definitions/userDTO.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse-userDTO_TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      tags:
      - Auth
  /api/v1/auth/logout:
    get:
      consumes:
      - application/json
      description: logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      tags:
      - Auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: refresh access token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse-userDTO_TokenResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      tags:
      - Auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: sign up user
      parameters:
      - description: SignUpInput
        in: body
        name: SignUpInput
        required: true
        schema:
          $ref: '#/definitions/userDTO.SignUpInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.SuccessResponse-userDTO_UserResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      tags:
      - Auth
  /api/v1/auth/reset-password:
    patch:
      consumes:
      - application/json
      description: reset user password
      parameters:
      - description: reset code
        in: path
        name: reset_code
        required: true
        type: string
      - description: ResetPasswordInput
        in: body
        name: ResetPasswordInput
        required: true
        schema:
          $ref: '#/definitions/userDTO.ResetPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      tags:
      - Auth
  /api/v1/auth/verify-email:
    post:
      description: verify user email
      parameters:
      - description: Verification code
        in: path
        name: verify_code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.ErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/api.ErrorResponse'
      tags:
      - Auth
  /api/v1/users/:
    delete:
      description: delete user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      tags:
      - User
    get:
      description: get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse-userDTO_UsersResponse'
        "500":
          description: Internal Server Error
      tags:
      - User
  /api/v1/users/me:
    get:
      description: get current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.SuccessResponse-userDTO_UserResponseDTO'
        "401":
          description: Unauthorized
      tags:
      - User
    patch:
      description: update user
      parameters:
      - description: UpdateUserInput
        in: body
        name: SignInInput
        required: true
        schema:
          $ref: '#/definitions/userDTO.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      tags:
      - User
swagger: "2.0"
